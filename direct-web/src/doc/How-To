##############	
# User Guide #
##############


1) Import the jar in your Web project.

2) Add servlet configuration in web.xml

	Declare direct servlet Default servlet is org.cfr.direct.servet.DirectServlet
			<servlet>
				<servlet-name>Direct</servlet-name>
				<servlet-class>org.cfr.direct.servlet.DirectServlet</servlet-class>
				...
				// init param
				...
				<init-param>
                    <param-name>direct.api-js.folder</param-name>
                    <param-value>/js/App/direct</param-value>
                </init-param>
                <init-param>
                    <param-name>direct.ns</param-name>
                    <param-value>App.direct</param-value>
                </init-param>
                <init-param>
                    <param-name>direct.provider.path</param-name>
                    <param-value>service/direct</param-value>
                </init-param>
			</servlet>
			
			This configuration allows to write directly in your javascript structure. [App] is the name of application namespace.
			You are just add Direct namespace as requirement.
			
			Ext.define('App.view.Viewport', {
                extend : 'Ext.Viewport',
                layout : 'fit',
                requires : ['App.view.Header', 'App.view.SideBar',
                        'App.view.Main', 'App.direct.Direct'],
                initComponent : function() {
                    ...
                    me.callParent(arguments);
                }
            });
			
			The servlet-name is also used to generate 
		
			->api file : <servlet-name>-api.js

					In fact, DirectJNgine generates three versions of a file. 
					With servlet name 'ExtPmiDirect' , you will get the following files:
					
					o Direct-api-debug.js: 
						The debug version of the api file.
						This is very readable, and includes comments for every method, including the Java
						types for the method parameters and the returned value.
						
					o Direct-api-min.js: 
						A minified version of the api file. 
						
					o Direct-api.js: 
						If you have the servlet debug parameter to true, this file will contain debug
						code, else it will contain minified code.
						
			->api namespace
					The namespace for the api. 
					For example, you will have to write the following code to register the api:
						Ext.Direct.addProvider(Direct.REMOTING_API);
						
			->providersUrl
			
			The providersUrl parameter is essential, because it will be used by Ext Direct to communicate
			with DirectJNgine: providersUrl is equal make sure it is the same as the servlet's url-pattern (see below), minus the ending "/*".
	
		
		Define init-param  js-Api folder location
	
			<init-param>
				<param-name>direct.api-js.folder</param-name>
				<param-value>/js/directApi</param-value>
			</init-param>
		
			By default js is generated in the root webapp folder

	Declare servlet mapping

        <servlet-mapping>
            <servlet-name>Direct</servlet-name>
            <url-pattern>/service/direct/*</url-pattern>
        </servlet-mapping>


3) In your spring beans configuration.  (facultativ)

	There is default configuration values but you can redefine the following attribute.
			
			First define a bean for class pmi.kbase.direct.DirectConfiguration

			-batchRequestsMaxThreadsPerRequest

				Please, take a look at the Optimizing batch requests
				handling using multiple threads section in DirectJNgine user guide
				for an explanation.
				Default value: 8.
			
			-batchRequestsMaxThreadsPoolSize
			
				Please, take a look at the Optimizing batch requests
				handling using multiple threads section in DirectJNgine user guide
				for an explanation.
				Default value: 80.
			
			-batchRequestsMinThreadsPoolSize

				Please, take a look at the Optimizing batch requests
				handling using multiple threads section in DirectJNgine user guide
				for an explanation.

			-batchRequestsMultithreadingEnabled
		
				Please, take a look at the Optimizing batch requests
				handling using multiple threads section for an
				explanation.
				Default value: true.
			
			-batchRequestsThreadKeepAliveSeconds

				Please, take a look at the Optimizing batch requests
				handling using multiple threads section in DirectJNgine user guide
				for an explanation.
				Default value: 60.
			
			-debug

				If set to true, default generated api files will be
				readable and include comments (they will not be
				minified), logs for JSON data will be pretty printed,etc.
				Set to false in your production releases.
				Default value: false.

			-minify 
		
				If set to false, DirectJNgine will not generate a
				minified version of api files.
				Default value: true
 
4) Implement a new Action
 
 	Action at least implements pmi.kbase.direct.action.IDirectAction and beeing annoted with @Component
 				
 				By default in js-Api file action class name is use as actionName.
				You can override it by using pmi.kbase.direct.annotations.DirectAction and specified a name.
 	
 	Each method in action must be prefixed or annoted with the following features.
 		
 				By default method name is use as methodName in js-Api.(minus the prefix if used) 
				You can override it by using following annotation and specified a value.		
 		
 		For simple method  
 			annotation : pmi.kbase.direct.annotations.DirectMethod
 			prefix     : djn_
 		
 		For polling method  
 			annotation : pmi.kbase.direct.annotations.DirectPollMethod
 			prefix     : djnpoll_
 			
 		For form method  
 			annotation : pmi.kbase.direct.annotations.DirectFormPostMethod
 			prefix     : djnform_

4) Miscellaneous
	
	DirectJNgine allow to regroup action by api ( direct action mapping is split in many js-Api file)
	This feature is not supported in this spring integration.

	DirectJNgine allow to define actions namespace for action grouped in the same js-Api.
	This feature is not supported in this spring integration. (cf: 1))
	
============================================================
For further information read the DirectJNgine user guide. 
http://code.google.com/p/directjngine/downloads/list
